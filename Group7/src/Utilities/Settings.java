package Utilities;

import java.net.InetAddress;
import java.net.UnknownHostException;

/**
 * Class to contain all of the configurable values for the elevator simulation system.
 * 
 * @author Marc Angers
 * @version 1.1
 */
public class Settings {
	// Physical system settings definitions:
	public static final int NUMBER_OF_FLOORS = 6;
	public static final int NUMBER_OF_ELEVATORS = 3;
	public static final int TIME_TO_OPEN_OR_CLOSE_DOORS = 2000; // The time it takes to open or close the elevator doors in milliseconds.
	public static final int TIME_TO_TRAVEL_BETWEEN_FLOORS = 500; // The time it takes the elevator to travel from one floor to another.
	
	// System IP Address definitions:
	public static final InetAddress FLOOR_SYSTEM_ADDRESS = getLocalAddress(); // Change this to 10.0.0.247 for Aaron's setup
	public static final InetAddress ELEVATOR_SYSTEM_ADDRESS = getLocalAddress(); // Change this to 10.0.0.228 for Aaron's setup
	public static final InetAddress SCHEDULER_ADDRESS = getLocalAddress(); // Change this to 10.0.0.164 for Aaron's setup
	
	// Event Consumer port (ECP) definitions:
	public static final int FLOOR_BUTTON_PRESS_ECP = 6900; // Floor Button Press Event Consumer Port.
	public static final int ELEVATOR_ARRIVAL_ECP = 6901; // Elevator Arrival Event Consumer Port.
	public static final int ELEVATOR_MOVEMENT_ECP = 6902; // Elevator Movement Event Consumer Port.
	public static final int ELEVATOR_REGISTRATION_ECP = 6903; // Elevator Registration Event Consumer Port.
	
	public static final int ELEVATOR_BUTTON_PRESS_ECP = 6904; // Initial Elevator Button Press Event Consumer Port. (Should allow for as many ports after this as there are elevators, up to 50 currently)
	public static final int DESTINATION_UPDATE_ECP = 6954; // Initial Destination Update Event Consumer Port. (Should allow for as many ports after this as there are elevators)
	
	/**
	 * Temporary helper method to initiate all of the elevator systems to run on the host machine.
	 * Once the code is ready to be run on multiple different computers this method won't be needed.
	 * 
	 * @return the localHostAddress generated by the InetAddress class.
	 */
	private static InetAddress getLocalAddress() {
		try {
			return InetAddress.getLocalHost();
		} catch (UnknownHostException uhe) {
			return null;
		}
	}

}
